package tn.esprit.foyer.services;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import tn.esprit.foyer.entities.Etudiant;
import tn.esprit.foyer.entities.Reservation;
import tn.esprit.foyer.repository.EtudiantRepository;
import tn.esprit.foyer.repository.FoyerRepository;
import tn.esprit.foyer.repository.ReservationRepository;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class EtudiantServiceImplTest {

    @Mock
    private EtudiantRepository etudiantRepository;

    @Mock
    private FoyerRepository foyerRepository;

    @Mock
    private ReservationRepository reservationRepository;

    @InjectMocks
    private EtudiantServiceImpl etudiantService;

    private Etudiant etudiant;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        etudiant = Etudiant.builder().idEtudiant(1L).nomEt("Ali").prenomEt("Ben Ali").build();
    }

    @Test
    void testAddEtudiant() {
        when(etudiantRepository.save(any(Etudiant.class))).thenReturn(etudiant);
        Etudiant saved = etudiantService.addEtudiant(etudiant);
        assertEquals(etudiant.getNomEt(), saved.getNomEt());
    }

    @Test
    void testRetrieveAllEtudiants() {
        when(etudiantRepository.findAll()).thenReturn(Collections.singletonList(etudiant));
        List<Etudiant> result = etudiantService.retrieveAllEtudiants();
        assertFalse(result.isEmpty());
    }

    @Test
    void testRetrieveEtudiantById() {
        when(etudiantRepository.findById(1L)).thenReturn(Optional.of(etudiant));
        Etudiant result = etudiantService.retrieveEtudiant(1L);
        assertNotNull(result);
    }

    @Test
    void testUpdateEtudiant() {
        when(etudiantRepository.save(any(Etudiant.class))).thenReturn(etudiant);
        Etudiant updated = etudiantService.updateEtudiant(etudiant);
        assertEquals("Ali", updated.getNomEt());
    }

    @Test
    void testRemoveEtudiant() {
        when(etudiantRepository.existsById(1L)).thenReturn(true);
        doNothing().when(etudiantRepository).deleteById(1L);
        etudiantService.removeEtudiant(1L);
        verify(etudiantRepository).deleteById(1L);
    }

    @Test
    void testAffecterEtudiantAReservation() {
        Reservation reservation = new Reservation();
        reservation.setEtudiants(new ArrayList<>());

        when(etudiantRepository.findByNomEtAndPrenomEt("Ali", "Ben Ali")).thenReturn(etudiant);
        when(reservationRepository.findById(1L)).thenReturn(Optional.of(reservation));
        when(reservationRepository.save(any(Reservation.class))).thenReturn(reservation);

        Etudiant result = etudiantService.affecterEtudiantAReservation("Ali", "Ben Ali", "1");
        assertEquals("Ali", result.getNomEt());
    }
}
