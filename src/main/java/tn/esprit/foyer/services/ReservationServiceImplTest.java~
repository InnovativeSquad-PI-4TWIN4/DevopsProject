package tn.esprit.foyer.services;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import tn.esprit.foyer.entities.Chambre;
import tn.esprit.foyer.entities.Etudiant;
import tn.esprit.foyer.entities.Reservation;
import tn.esprit.foyer.entities.TypeChambre;
import tn.esprit.foyer.repository.ChambreRepository;
import tn.esprit.foyer.repository.EtudiantRepository;
import tn.esprit.foyer.repository.ReservationRepository;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class ReservationServiceImplTest {
    private List<Reservation> reservations = new ArrayList<>();
    @Mock
    private EtudiantRepository etudiantRepository;

    @Mock
    private ChambreRepository chambreRepository;

    @Mock
    private ReservationRepository reservationRepository;

    @InjectMocks
    private ReservationServicImpl reservationService;

    private Etudiant etudiant;
    private Chambre chambre;
    private Reservation reservation;

    @BeforeEach
    public void setUp() {
        // Initialisation des objets de test
        etudiant = new Etudiant();
        etudiant.setCin(12345L);
        etudiant.setNomEt("John");
        etudiant.setPrenomEt("Doe");

        chambre = new Chambre();
        chambre.setNumeroChambre(101L);
        chambre.setTypeC(TypeChambre.SIMPLE);
        chambre.setReservations(new ArrayList<>()); // Chambre sans réservation initiale

        reservation = new Reservation();
        reservation.setIdReservation("1011234512023"); // Exemple d'ID basé sur la chambre et l'étudiant
        reservation.setEstValid(true);
        reservation.setEtudiants(List.of(etudiant)); // Ajouter l'étudiant à la réservation
    }

    @Test
    public void testAjouterReservationEtAssignerAChambreEtAEtudiant() {
        // Comportement simulé des méthodes
        when(etudiantRepository.findByCin(12345L)).thenReturn(etudiant);
        when(chambreRepository.findByNumeroChambre(101L)).thenReturn(chambre);
        when(reservationRepository.save(any(Reservation.class))).thenReturn(reservation);

        // Appel de la méthode à tester
        Reservation result = reservationService.ajouterReservationEtAssignerAChambreEtAEtudiant(reservation, 101L, 12345L);

        // Vérification des interactions et des résultats
        assertNotNull(result);
        assertTrue(result.getEtudiants().contains(etudiant)); // Vérifier si l'étudiant a été assigné à la réservation
        verify(reservationRepository, times(1)).save(any(Reservation.class)); // Vérifier que la méthode save a été appelée une fois
        verify(chambreRepository, times(1)).save(chambre); // Vérifier que la méthode save de chambre a été appelée une fois
    }

    @Test
    void testAjouterReservationEtAssignerAChambreEtAEtudiantChambrePleine() {
        // Scénario : la chambre est pleine (2 réservations déjà en cours)

        when(etudiantRepository.findByCin(anyLong())).thenReturn(etudiant);
        when(chambreRepository.findByNumeroChambre(anyLong())).thenReturn(chambre);
        when(reservationRepository.getReservationsCurrentYear(any(), any(), anyLong())).thenReturn(2);

        Reservation result = reservationService.ajouterReservationEtAssignerAChambreEtAEtudiant(reservation, 101L, 12345L);

        assertNull(result);  // La chambre est pleine, aucune réservation ne doit être ajoutée
        verify(reservationRepository, times(0)).save(any(Reservation.class)); // Aucun appel à save
    }


    @Test
    public void testAjouterReservationChambrePleineWithError() {
        // Préparer le scénario où la chambre est pleine avec 2 réservations existantes
        chambre.setTypeC(TypeChambre.SIMPLE); // Assurez-vous que la chambre est du type 'SIMPLE'
        chambre.setReservations(List.of(new Reservation(), new Reservation())); // Ajouter deux réservations

        when(etudiantRepository.findByCin(12345L)).thenReturn(etudiant);
        when(chambreRepository.findByNumeroChambre(101L)).thenReturn(chambre);
        when(reservationRepository.getReservationsCurrentYear(any(), any(), eq(101L))).thenReturn(2);  // Simulation du retour de 2 réservations

        // Appel de la méthode à tester avec une chambre pleine
        Reservation result = reservationService.ajouterReservationEtAssignerAChambreEtAEtudiant(reservation, 101L, 12345L);

        // Vérification des résultats
        assertNull(result); // La méthode devrait retourner null si la chambre est pleine
        verify(reservationRepository, never()).save(any(Reservation.class)); // Vérifier que save n'a pas été appelé
        verify(chambreRepository, never()).save(chambre); // Vérifier que save pour la chambre n'a pas été appelé
    }



    @Test
    public void testAjouterReservationChambreDoubleWithSpace() {
        // Scénario où la chambre est de type DOUBLE et il reste de la place pour un étudiant supplémentaire
        chambre.setTypeC(TypeChambre.DOUBLE);  // La chambre est de type double
        chambre.setReservations(new ArrayList<>());  // Aucune réservation existante, la chambre est vide

        // Simuler un étudiant avec CIN 12345
        when(etudiantRepository.findByCin(12345L)).thenReturn(etudiant);
        // Simuler la recherche de la chambre numéro 101
        when(chambreRepository.findByNumeroChambre(101L)).thenReturn(chambre);
        // Retourner 0 réservations existantes pour la chambre (chambre vide)
        when(reservationRepository.getReservationsCurrentYear(any(), any(), eq(101L))).thenReturn(0);

        // Appel de la méthode à tester avec une chambre de type DOUBLE
        Reservation result = reservationService.ajouterReservationEtAssignerAChambreEtAEtudiant(reservation, 101L, 12345L);

        // Vérification que la réservation a bien été ajoutée
        assertNotNull(result);  // La réservation ne doit pas être nulle car il reste de la place
        assertTrue(result.getEtudiants().contains(etudiant));  // Vérifier si l'étudiant a été bien assigné à la réservation
        verify(reservationRepository, times(1)).save(any(Reservation.class));  // Vérifier que save a bien été appelé une fois
        verify(chambreRepository, times(1)).save(chambre);  // Vérifier que save a été appelé pour la chambre

        // Vérification de l'état de la chambre après la réservation (si nécessaire)
        assertEquals(1, chambre.getReservations().size());  // Vérifier qu'une réservation a bien été ajoutée à la chambre
    }


   // @Test
//    public void testAjouterReservationChambreTripleWithSpace() {
//        // Scénario où la chambre est de type TRIPLE et il reste de la place pour un étudiant supplémentaire
//        chambre.setTypeC(TypeChambre.TRIPLE);  // La chambre est de type triple
//        chambre.setReservations(List.of(new Reservation(), new Reservation()));  // Ajouter deux réservations existantes
//
//        when(etudiantRepository.findByCin(12345L)).thenReturn(etudiant);  // Simuler un étudiant avec CIN 12345
//        when(chambreRepository.findByNumeroChambre(101L)).thenReturn(chambre);  // Simuler la recherche de la chambre numéro 101
//        when(reservationRepository.getReservationsCurrentYear(any(), any(), eq(101L))).thenReturn(2);  // Retourner 2 réservations existantes pour l'année en cours
//
//        // Appel de la méthode à tester avec une chambre de type TRIPLE
//        Reservation result = reservationService.ajouterReservationEtAssignerAChambreEtAEtudiant(reservation, 101L, 12345L);
//
//        // Vérification que la réservation a bien été ajoutée pour une chambre TRIPLE
//        assertNotNull(result);  // La réservation ne doit pas être nulle car la chambre TRIPLE peut encore accepter un étudiant supplémentaire
//        assertTrue(result.getEtudiants().contains(etudiant));  // Vérifier que l'étudiant a été assigné à la réservation
//        verify(reservationRepository, times(1)).save(any(Reservation.class));  // Vérifier que save a bien été appelé une fois
//        verify(chambreRepository, times(1)).save(chambre);  // Vérifier que save a été appelé pour la chambre
//    }


}
